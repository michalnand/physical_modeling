# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyphy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyphy')
    _pyphy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyphy', [dirname(__file__)])
        except ImportError:
            import _pyphy
            return _pyphy
        try:
            _mod = imp.load_module('_pyphy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyphy = swig_import_helper()
    del swig_import_helper
else:
    import _pyphy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyphy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyphy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyphy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyphy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyphy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyphy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyphy.SwigPyIterator_copy(self)

    def next(self):
        return _pyphy.SwigPyIterator_next(self)

    def __next__(self):
        return _pyphy.SwigPyIterator___next__(self)

    def previous(self):
        return _pyphy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyphy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyphy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyphy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyphy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyphy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyphy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyphy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyphy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.CharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.CharVector___nonzero__(self)

    def __bool__(self):
        return _pyphy.CharVector___bool__(self)

    def __len__(self):
        return _pyphy.CharVector___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.CharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.CharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.CharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.CharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.CharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.CharVector___setitem__(self, *args)

    def pop(self):
        return _pyphy.CharVector_pop(self)

    def append(self, x):
        return _pyphy.CharVector_append(self, x)

    def empty(self):
        return _pyphy.CharVector_empty(self)

    def size(self):
        return _pyphy.CharVector_size(self)

    def swap(self, v):
        return _pyphy.CharVector_swap(self, v)

    def begin(self):
        return _pyphy.CharVector_begin(self)

    def end(self):
        return _pyphy.CharVector_end(self)

    def rbegin(self):
        return _pyphy.CharVector_rbegin(self)

    def rend(self):
        return _pyphy.CharVector_rend(self)

    def clear(self):
        return _pyphy.CharVector_clear(self)

    def get_allocator(self):
        return _pyphy.CharVector_get_allocator(self)

    def pop_back(self):
        return _pyphy.CharVector_pop_back(self)

    def erase(self, *args):
        return _pyphy.CharVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_CharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.CharVector_push_back(self, x)

    def front(self):
        return _pyphy.CharVector_front(self)

    def back(self):
        return _pyphy.CharVector_back(self)

    def assign(self, n, x):
        return _pyphy.CharVector_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.CharVector_resize(self, *args)

    def insert(self, *args):
        return _pyphy.CharVector_insert(self, *args)

    def reserve(self, n):
        return _pyphy.CharVector_reserve(self, n)

    def capacity(self):
        return _pyphy.CharVector_capacity(self)
    __swig_destroy__ = _pyphy.delete_CharVector
    __del__ = lambda self: None
CharVector_swigregister = _pyphy.CharVector_swigregister
CharVector_swigregister(CharVector)

class UnsignedCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.UnsignedCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.UnsignedCharVector___nonzero__(self)

    def __bool__(self):
        return _pyphy.UnsignedCharVector___bool__(self)

    def __len__(self):
        return _pyphy.UnsignedCharVector___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.UnsignedCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.UnsignedCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.UnsignedCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.UnsignedCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.UnsignedCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.UnsignedCharVector___setitem__(self, *args)

    def pop(self):
        return _pyphy.UnsignedCharVector_pop(self)

    def append(self, x):
        return _pyphy.UnsignedCharVector_append(self, x)

    def empty(self):
        return _pyphy.UnsignedCharVector_empty(self)

    def size(self):
        return _pyphy.UnsignedCharVector_size(self)

    def swap(self, v):
        return _pyphy.UnsignedCharVector_swap(self, v)

    def begin(self):
        return _pyphy.UnsignedCharVector_begin(self)

    def end(self):
        return _pyphy.UnsignedCharVector_end(self)

    def rbegin(self):
        return _pyphy.UnsignedCharVector_rbegin(self)

    def rend(self):
        return _pyphy.UnsignedCharVector_rend(self)

    def clear(self):
        return _pyphy.UnsignedCharVector_clear(self)

    def get_allocator(self):
        return _pyphy.UnsignedCharVector_get_allocator(self)

    def pop_back(self):
        return _pyphy.UnsignedCharVector_pop_back(self)

    def erase(self, *args):
        return _pyphy.UnsignedCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_UnsignedCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.UnsignedCharVector_push_back(self, x)

    def front(self):
        return _pyphy.UnsignedCharVector_front(self)

    def back(self):
        return _pyphy.UnsignedCharVector_back(self)

    def assign(self, n, x):
        return _pyphy.UnsignedCharVector_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.UnsignedCharVector_resize(self, *args)

    def insert(self, *args):
        return _pyphy.UnsignedCharVector_insert(self, *args)

    def reserve(self, n):
        return _pyphy.UnsignedCharVector_reserve(self, n)

    def capacity(self):
        return _pyphy.UnsignedCharVector_capacity(self)
    __swig_destroy__ = _pyphy.delete_UnsignedCharVector
    __del__ = lambda self: None
UnsignedCharVector_swigregister = _pyphy.UnsignedCharVector_swigregister
UnsignedCharVector_swigregister(UnsignedCharVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.IntVector___nonzero__(self)

    def __bool__(self):
        return _pyphy.IntVector___bool__(self)

    def __len__(self):
        return _pyphy.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.IntVector___setitem__(self, *args)

    def pop(self):
        return _pyphy.IntVector_pop(self)

    def append(self, x):
        return _pyphy.IntVector_append(self, x)

    def empty(self):
        return _pyphy.IntVector_empty(self)

    def size(self):
        return _pyphy.IntVector_size(self)

    def swap(self, v):
        return _pyphy.IntVector_swap(self, v)

    def begin(self):
        return _pyphy.IntVector_begin(self)

    def end(self):
        return _pyphy.IntVector_end(self)

    def rbegin(self):
        return _pyphy.IntVector_rbegin(self)

    def rend(self):
        return _pyphy.IntVector_rend(self)

    def clear(self):
        return _pyphy.IntVector_clear(self)

    def get_allocator(self):
        return _pyphy.IntVector_get_allocator(self)

    def pop_back(self):
        return _pyphy.IntVector_pop_back(self)

    def erase(self, *args):
        return _pyphy.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.IntVector_push_back(self, x)

    def front(self):
        return _pyphy.IntVector_front(self)

    def back(self):
        return _pyphy.IntVector_back(self)

    def assign(self, n, x):
        return _pyphy.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pyphy.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pyphy.IntVector_reserve(self, n)

    def capacity(self):
        return _pyphy.IntVector_capacity(self)
    __swig_destroy__ = _pyphy.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pyphy.IntVector_swigregister
IntVector_swigregister(IntVector)

class UnsignedIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _pyphy.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _pyphy.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _pyphy.UnsignedIntVector_pop(self)

    def append(self, x):
        return _pyphy.UnsignedIntVector_append(self, x)

    def empty(self):
        return _pyphy.UnsignedIntVector_empty(self)

    def size(self):
        return _pyphy.UnsignedIntVector_size(self)

    def swap(self, v):
        return _pyphy.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _pyphy.UnsignedIntVector_begin(self)

    def end(self):
        return _pyphy.UnsignedIntVector_end(self)

    def rbegin(self):
        return _pyphy.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _pyphy.UnsignedIntVector_rend(self)

    def clear(self):
        return _pyphy.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _pyphy.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _pyphy.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _pyphy.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_UnsignedIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _pyphy.UnsignedIntVector_front(self)

    def back(self):
        return _pyphy.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _pyphy.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _pyphy.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _pyphy.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _pyphy.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _pyphy.delete_UnsignedIntVector
    __del__ = lambda self: None
UnsignedIntVector_swigregister = _pyphy.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pyphy.FloatVector___bool__(self)

    def __len__(self):
        return _pyphy.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pyphy.FloatVector_pop(self)

    def append(self, x):
        return _pyphy.FloatVector_append(self, x)

    def empty(self):
        return _pyphy.FloatVector_empty(self)

    def size(self):
        return _pyphy.FloatVector_size(self)

    def swap(self, v):
        return _pyphy.FloatVector_swap(self, v)

    def begin(self):
        return _pyphy.FloatVector_begin(self)

    def end(self):
        return _pyphy.FloatVector_end(self)

    def rbegin(self):
        return _pyphy.FloatVector_rbegin(self)

    def rend(self):
        return _pyphy.FloatVector_rend(self)

    def clear(self):
        return _pyphy.FloatVector_clear(self)

    def get_allocator(self):
        return _pyphy.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pyphy.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pyphy.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.FloatVector_push_back(self, x)

    def front(self):
        return _pyphy.FloatVector_front(self)

    def back(self):
        return _pyphy.FloatVector_back(self)

    def assign(self, n, x):
        return _pyphy.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pyphy.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pyphy.FloatVector_reserve(self, n)

    def capacity(self):
        return _pyphy.FloatVector_capacity(self)
    __swig_destroy__ = _pyphy.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _pyphy.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pyphy.DoubleVector___bool__(self)

    def __len__(self):
        return _pyphy.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pyphy.DoubleVector_pop(self)

    def append(self, x):
        return _pyphy.DoubleVector_append(self, x)

    def empty(self):
        return _pyphy.DoubleVector_empty(self)

    def size(self):
        return _pyphy.DoubleVector_size(self)

    def swap(self, v):
        return _pyphy.DoubleVector_swap(self, v)

    def begin(self):
        return _pyphy.DoubleVector_begin(self)

    def end(self):
        return _pyphy.DoubleVector_end(self)

    def rbegin(self):
        return _pyphy.DoubleVector_rbegin(self)

    def rend(self):
        return _pyphy.DoubleVector_rend(self)

    def clear(self):
        return _pyphy.DoubleVector_clear(self)

    def get_allocator(self):
        return _pyphy.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pyphy.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pyphy.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.DoubleVector_push_back(self, x)

    def front(self):
        return _pyphy.DoubleVector_front(self)

    def back(self):
        return _pyphy.DoubleVector_back(self)

    def assign(self, n, x):
        return _pyphy.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pyphy.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pyphy.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pyphy.DoubleVector_capacity(self)
    __swig_destroy__ = _pyphy.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pyphy.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.IntMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.IntMatrix___nonzero__(self)

    def __bool__(self):
        return _pyphy.IntMatrix___bool__(self)

    def __len__(self):
        return _pyphy.IntMatrix___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.IntMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.IntMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.IntMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.IntMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.IntMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.IntMatrix___setitem__(self, *args)

    def pop(self):
        return _pyphy.IntMatrix_pop(self)

    def append(self, x):
        return _pyphy.IntMatrix_append(self, x)

    def empty(self):
        return _pyphy.IntMatrix_empty(self)

    def size(self):
        return _pyphy.IntMatrix_size(self)

    def swap(self, v):
        return _pyphy.IntMatrix_swap(self, v)

    def begin(self):
        return _pyphy.IntMatrix_begin(self)

    def end(self):
        return _pyphy.IntMatrix_end(self)

    def rbegin(self):
        return _pyphy.IntMatrix_rbegin(self)

    def rend(self):
        return _pyphy.IntMatrix_rend(self)

    def clear(self):
        return _pyphy.IntMatrix_clear(self)

    def get_allocator(self):
        return _pyphy.IntMatrix_get_allocator(self)

    def pop_back(self):
        return _pyphy.IntMatrix_pop_back(self)

    def erase(self, *args):
        return _pyphy.IntMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_IntMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.IntMatrix_push_back(self, x)

    def front(self):
        return _pyphy.IntMatrix_front(self)

    def back(self):
        return _pyphy.IntMatrix_back(self)

    def assign(self, n, x):
        return _pyphy.IntMatrix_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.IntMatrix_resize(self, *args)

    def insert(self, *args):
        return _pyphy.IntMatrix_insert(self, *args)

    def reserve(self, n):
        return _pyphy.IntMatrix_reserve(self, n)

    def capacity(self):
        return _pyphy.IntMatrix_capacity(self)
    __swig_destroy__ = _pyphy.delete_IntMatrix
    __del__ = lambda self: None
IntMatrix_swigregister = _pyphy.IntMatrix_swigregister
IntMatrix_swigregister(IntMatrix)

class UnsignedIntMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.UnsignedIntMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.UnsignedIntMatrix___nonzero__(self)

    def __bool__(self):
        return _pyphy.UnsignedIntMatrix___bool__(self)

    def __len__(self):
        return _pyphy.UnsignedIntMatrix___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.UnsignedIntMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.UnsignedIntMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.UnsignedIntMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.UnsignedIntMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.UnsignedIntMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.UnsignedIntMatrix___setitem__(self, *args)

    def pop(self):
        return _pyphy.UnsignedIntMatrix_pop(self)

    def append(self, x):
        return _pyphy.UnsignedIntMatrix_append(self, x)

    def empty(self):
        return _pyphy.UnsignedIntMatrix_empty(self)

    def size(self):
        return _pyphy.UnsignedIntMatrix_size(self)

    def swap(self, v):
        return _pyphy.UnsignedIntMatrix_swap(self, v)

    def begin(self):
        return _pyphy.UnsignedIntMatrix_begin(self)

    def end(self):
        return _pyphy.UnsignedIntMatrix_end(self)

    def rbegin(self):
        return _pyphy.UnsignedIntMatrix_rbegin(self)

    def rend(self):
        return _pyphy.UnsignedIntMatrix_rend(self)

    def clear(self):
        return _pyphy.UnsignedIntMatrix_clear(self)

    def get_allocator(self):
        return _pyphy.UnsignedIntMatrix_get_allocator(self)

    def pop_back(self):
        return _pyphy.UnsignedIntMatrix_pop_back(self)

    def erase(self, *args):
        return _pyphy.UnsignedIntMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_UnsignedIntMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.UnsignedIntMatrix_push_back(self, x)

    def front(self):
        return _pyphy.UnsignedIntMatrix_front(self)

    def back(self):
        return _pyphy.UnsignedIntMatrix_back(self)

    def assign(self, n, x):
        return _pyphy.UnsignedIntMatrix_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.UnsignedIntMatrix_resize(self, *args)

    def insert(self, *args):
        return _pyphy.UnsignedIntMatrix_insert(self, *args)

    def reserve(self, n):
        return _pyphy.UnsignedIntMatrix_reserve(self, n)

    def capacity(self):
        return _pyphy.UnsignedIntMatrix_capacity(self)
    __swig_destroy__ = _pyphy.delete_UnsignedIntMatrix
    __del__ = lambda self: None
UnsignedIntMatrix_swigregister = _pyphy.UnsignedIntMatrix_swigregister
UnsignedIntMatrix_swigregister(UnsignedIntMatrix)

class FloatMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.FloatMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.FloatMatrix___nonzero__(self)

    def __bool__(self):
        return _pyphy.FloatMatrix___bool__(self)

    def __len__(self):
        return _pyphy.FloatMatrix___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.FloatMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.FloatMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.FloatMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.FloatMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.FloatMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.FloatMatrix___setitem__(self, *args)

    def pop(self):
        return _pyphy.FloatMatrix_pop(self)

    def append(self, x):
        return _pyphy.FloatMatrix_append(self, x)

    def empty(self):
        return _pyphy.FloatMatrix_empty(self)

    def size(self):
        return _pyphy.FloatMatrix_size(self)

    def swap(self, v):
        return _pyphy.FloatMatrix_swap(self, v)

    def begin(self):
        return _pyphy.FloatMatrix_begin(self)

    def end(self):
        return _pyphy.FloatMatrix_end(self)

    def rbegin(self):
        return _pyphy.FloatMatrix_rbegin(self)

    def rend(self):
        return _pyphy.FloatMatrix_rend(self)

    def clear(self):
        return _pyphy.FloatMatrix_clear(self)

    def get_allocator(self):
        return _pyphy.FloatMatrix_get_allocator(self)

    def pop_back(self):
        return _pyphy.FloatMatrix_pop_back(self)

    def erase(self, *args):
        return _pyphy.FloatMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_FloatMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.FloatMatrix_push_back(self, x)

    def front(self):
        return _pyphy.FloatMatrix_front(self)

    def back(self):
        return _pyphy.FloatMatrix_back(self)

    def assign(self, n, x):
        return _pyphy.FloatMatrix_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.FloatMatrix_resize(self, *args)

    def insert(self, *args):
        return _pyphy.FloatMatrix_insert(self, *args)

    def reserve(self, n):
        return _pyphy.FloatMatrix_reserve(self, n)

    def capacity(self):
        return _pyphy.FloatMatrix_capacity(self)
    __swig_destroy__ = _pyphy.delete_FloatMatrix
    __del__ = lambda self: None
FloatMatrix_swigregister = _pyphy.FloatMatrix_swigregister
FloatMatrix_swigregister(FloatMatrix)

class DoubleMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyphy.DoubleMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyphy.DoubleMatrix___nonzero__(self)

    def __bool__(self):
        return _pyphy.DoubleMatrix___bool__(self)

    def __len__(self):
        return _pyphy.DoubleMatrix___len__(self)

    def __getslice__(self, i, j):
        return _pyphy.DoubleMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyphy.DoubleMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyphy.DoubleMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyphy.DoubleMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyphy.DoubleMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyphy.DoubleMatrix___setitem__(self, *args)

    def pop(self):
        return _pyphy.DoubleMatrix_pop(self)

    def append(self, x):
        return _pyphy.DoubleMatrix_append(self, x)

    def empty(self):
        return _pyphy.DoubleMatrix_empty(self)

    def size(self):
        return _pyphy.DoubleMatrix_size(self)

    def swap(self, v):
        return _pyphy.DoubleMatrix_swap(self, v)

    def begin(self):
        return _pyphy.DoubleMatrix_begin(self)

    def end(self):
        return _pyphy.DoubleMatrix_end(self)

    def rbegin(self):
        return _pyphy.DoubleMatrix_rbegin(self)

    def rend(self):
        return _pyphy.DoubleMatrix_rend(self)

    def clear(self):
        return _pyphy.DoubleMatrix_clear(self)

    def get_allocator(self):
        return _pyphy.DoubleMatrix_get_allocator(self)

    def pop_back(self):
        return _pyphy.DoubleMatrix_pop_back(self)

    def erase(self, *args):
        return _pyphy.DoubleMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _pyphy.new_DoubleMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyphy.DoubleMatrix_push_back(self, x)

    def front(self):
        return _pyphy.DoubleMatrix_front(self)

    def back(self):
        return _pyphy.DoubleMatrix_back(self)

    def assign(self, n, x):
        return _pyphy.DoubleMatrix_assign(self, n, x)

    def resize(self, *args):
        return _pyphy.DoubleMatrix_resize(self, *args)

    def insert(self, *args):
        return _pyphy.DoubleMatrix_insert(self, *args)

    def reserve(self, n):
        return _pyphy.DoubleMatrix_reserve(self, n)

    def capacity(self):
        return _pyphy.DoubleMatrix_capacity(self)
    __swig_destroy__ = _pyphy.delete_DoubleMatrix
    __del__ = lambda self: None
DoubleMatrix_swigregister = _pyphy.DoubleMatrix_swigregister
DoubleMatrix_swigregister(DoubleMatrix)

class DatsToTrajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatsToTrajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatsToTrajectory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyphy.new_DatsToTrajectory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_DatsToTrajectory
    __del__ = lambda self: None

    def get_trajectory_input(self):
        return _pyphy.DatsToTrajectory_get_trajectory_input(self)

    def get_trajectory_output(self):
        return _pyphy.DatsToTrajectory_get_trajectory_output(self)
DatsToTrajectory_swigregister = _pyphy.DatsToTrajectory_swigregister
DatsToTrajectory_swigregister(DatsToTrajectory)

class NNTrajectorySpatialInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NNTrajectorySpatialInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NNTrajectorySpatialInput, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyphy.new_NNTrajectorySpatialInput(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_NNTrajectorySpatialInput
    __del__ = lambda self: None

    def create(self, *args):
        return _pyphy.NNTrajectorySpatialInput_create(self, *args)

    def get_width(self):
        return _pyphy.NNTrajectorySpatialInput_get_width(self)

    def get_height(self):
        return _pyphy.NNTrajectorySpatialInput_get_height(self)

    def get_channels(self):
        return _pyphy.NNTrajectorySpatialInput_get_channels(self)
NNTrajectorySpatialInput_swigregister = _pyphy.NNTrajectorySpatialInput_swigregister
NNTrajectorySpatialInput_swigregister(NNTrajectorySpatialInput)

class PredictTrajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictTrajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PredictTrajectory, name)
    __repr__ = _swig_repr

    def __init__(self, initial_conditions, dataset_config_file_name, experiment_dir):
        this = _pyphy.new_PredictTrajectory(initial_conditions, dataset_config_file_name, experiment_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_PredictTrajectory
    __del__ = lambda self: None

    def get_trajectory(self):
        return _pyphy.PredictTrajectory_get_trajectory(self)

    def process(self):
        return _pyphy.PredictTrajectory_process(self)
PredictTrajectory_swigregister = _pyphy.PredictTrajectory_swigregister
PredictTrajectory_swigregister(PredictTrajectory)

class TrajectoryCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajectoryCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajectoryCompare, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyphy.new_TrajectoryCompare()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_TrajectoryCompare
    __del__ = lambda self: None

    def process(self, file_name_prefix, target, resulted):
        return _pyphy.TrajectoryCompare_process(self, file_name_prefix, target, resulted)
TrajectoryCompare_swigregister = _pyphy.TrajectoryCompare_swigregister
TrajectoryCompare_swigregister(TrajectoryCompare)

class Trajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trajectory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyphy.new_Trajectory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_Trajectory
    __del__ = lambda self: None

    def init(self, w, h, d, value=0.0):
        return _pyphy.Trajectory_init(self, w, h, d, value)

    def clear(self):
        return _pyphy.Trajectory_clear(self)

    def get_width(self):
        return _pyphy.Trajectory_get_width(self)

    def get_height(self):
        return _pyphy.Trajectory_get_height(self)

    def get_depth(self):
        return _pyphy.Trajectory_get_depth(self)

    def set(self, x, y, z, value):
        return _pyphy.Trajectory_set(self, x, y, z, value)

    def get(self, x, y, z):
        return _pyphy.Trajectory_get(self, x, y, z)

    def _print(self):
        return _pyphy.Trajectory__print(self)

    def save(self, file_name_prefix):
        return _pyphy.Trajectory_save(self, file_name_prefix)

    def random(self, width, height, depth, dt=0.001):
        return _pyphy.Trajectory_random(self, width, height, depth, dt)
Trajectory_swigregister = _pyphy.Trajectory_swigregister
Trajectory_swigregister(Trajectory)

class sDatExtremes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sDatExtremes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sDatExtremes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max"] = _pyphy.sDatExtremes_max_set
    __swig_getmethods__["max"] = _pyphy.sDatExtremes_max_get
    if _newclass:
        max = _swig_property(_pyphy.sDatExtremes_max_get, _pyphy.sDatExtremes_max_set)
    __swig_setmethods__["min"] = _pyphy.sDatExtremes_min_set
    __swig_getmethods__["min"] = _pyphy.sDatExtremes_min_get
    if _newclass:
        min = _swig_property(_pyphy.sDatExtremes_min_get, _pyphy.sDatExtremes_min_set)
    __swig_setmethods__["max_column"] = _pyphy.sDatExtremes_max_column_set
    __swig_getmethods__["max_column"] = _pyphy.sDatExtremes_max_column_get
    if _newclass:
        max_column = _swig_property(_pyphy.sDatExtremes_max_column_get, _pyphy.sDatExtremes_max_column_set)
    __swig_setmethods__["min_column"] = _pyphy.sDatExtremes_min_column_set
    __swig_getmethods__["min_column"] = _pyphy.sDatExtremes_min_column_get
    if _newclass:
        min_column = _swig_property(_pyphy.sDatExtremes_min_column_get, _pyphy.sDatExtremes_min_column_set)

    def __init__(self):
        this = _pyphy.new_sDatExtremes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_sDatExtremes
    __del__ = lambda self: None
sDatExtremes_swigregister = _pyphy.sDatExtremes_swigregister
sDatExtremes_swigregister(sDatExtremes)

class DatLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatLoad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyphy.new_DatLoad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_DatLoad
    __del__ = lambda self: None

    def get_columns_count(self):
        return _pyphy.DatLoad_get_columns_count(self)

    def get_lines_count(self):
        return _pyphy.DatLoad_get_lines_count(self)

    def get(self, column, line):
        return _pyphy.DatLoad_get(self, column, line)

    def set(self, column, line, value):
        return _pyphy.DatLoad_set(self, column, line, value)

    def get_max(self):
        return _pyphy.DatLoad_get_max(self)

    def get_max_column(self, column):
        return _pyphy.DatLoad_get_max_column(self, column)

    def get_min(self):
        return _pyphy.DatLoad_get_min(self)

    def get_min_column(self, column):
        return _pyphy.DatLoad_get_min_column(self, column)

    def normalise_per_column(self, min=0.0, max=1.0):
        return _pyphy.DatLoad_normalise_per_column(self, min, max)

    def normalise(self, min=0.0, max=1.0):
        return _pyphy.DatLoad_normalise(self, min, max)

    def normalise_column_kq(self, column, k, q):
        return _pyphy.DatLoad_normalise_column_kq(self, column, k, q)

    def _print(self, verbose=False):
        return _pyphy.DatLoad__print(self, verbose)

    def save(self, file_name):
        return _pyphy.DatLoad_save(self, file_name)

    def load(self, file_name):
        return _pyphy.DatLoad_load(self, file_name)

    def find_extreme(self):
        return _pyphy.DatLoad_find_extreme(self)
DatLoad_swigregister = _pyphy.DatLoad_swigregister
DatLoad_swigregister(DatLoad)

class DatsLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatsLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatsLoad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyphy.new_DatsLoad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_DatsLoad
    __del__ = lambda self: None

    def _print(self):
        return _pyphy.DatsLoad__print(self)

    def save(self, file_name_prefix):
        return _pyphy.DatsLoad_save(self, file_name_prefix)

    def get(self, dat_idx, column_idx, line_idx):
        return _pyphy.DatsLoad_get(self, dat_idx, column_idx, line_idx)

    def set(self, dat_idx, column_idx, line_idx, value):
        return _pyphy.DatsLoad_set(self, dat_idx, column_idx, line_idx, value)

    def get_dat_count(self):
        return _pyphy.DatsLoad_get_dat_count(self)

    def get_columns_count(self):
        return _pyphy.DatsLoad_get_columns_count(self)

    def get_lines_count(self):
        return _pyphy.DatsLoad_get_lines_count(self)

    def get_max(self):
        return _pyphy.DatsLoad_get_max(self)

    def get_max_column(self, column):
        return _pyphy.DatsLoad_get_max_column(self, column)

    def get_min(self):
        return _pyphy.DatsLoad_get_min(self)

    def get_min_column(self, column):
        return _pyphy.DatsLoad_get_min_column(self, column)

    def normalise_column(self, min=0.0, max=1.0, find_own_extreme=True):
        return _pyphy.DatsLoad_normalise_column(self, min, max, find_own_extreme)

    def get_extremes(self):
        return _pyphy.DatsLoad_get_extremes(self)

    def set_extremes(self, extremes):
        return _pyphy.DatsLoad_set_extremes(self, extremes)

    def find_extreme(self):
        return _pyphy.DatsLoad_find_extreme(self)
DatsLoad_swigregister = _pyphy.DatsLoad_swigregister
DatsLoad_swigregister(DatsLoad)

class sDatasetItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sDatasetItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sDatasetItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _pyphy.sDatasetItem_input_set
    __swig_getmethods__["input"] = _pyphy.sDatasetItem_input_get
    if _newclass:
        input = _swig_property(_pyphy.sDatasetItem_input_get, _pyphy.sDatasetItem_input_set)
    __swig_setmethods__["output"] = _pyphy.sDatasetItem_output_set
    __swig_getmethods__["output"] = _pyphy.sDatasetItem_output_get
    if _newclass:
        output = _swig_property(_pyphy.sDatasetItem_output_get, _pyphy.sDatasetItem_output_set)

    def __init__(self):
        this = _pyphy.new_sDatasetItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_sDatasetItem
    __del__ = lambda self: None
sDatasetItem_swigregister = _pyphy.sDatasetItem_swigregister
sDatasetItem_swigregister(sDatasetItem)

class DatasetInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyphy.new_DatasetInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_DatasetInterface
    __del__ = lambda self: None

    def _print(self):
        return _pyphy.DatasetInterface__print(self)

    def get_random_training(self):
        return _pyphy.DatasetInterface_get_random_training(self)

    def get_training(self, class_idx, idx):
        return _pyphy.DatasetInterface_get_training(self, class_idx, idx)

    def get_class_items_count(self, class_idx):
        return _pyphy.DatasetInterface_get_class_items_count(self, class_idx)

    def get_testing(self, idx):
        return _pyphy.DatasetInterface_get_testing(self, idx)

    def get_random_testing(self):
        return _pyphy.DatasetInterface_get_random_testing(self)

    def get_unlabeled(self, idx):
        return _pyphy.DatasetInterface_get_unlabeled(self, idx)

    def get_random_unlabeled(self):
        return _pyphy.DatasetInterface_get_random_unlabeled(self)

    def get_training_size(self):
        return _pyphy.DatasetInterface_get_training_size(self)

    def get_testing_size(self):
        return _pyphy.DatasetInterface_get_testing_size(self)

    def get_unlabeled_size(self):
        return _pyphy.DatasetInterface_get_unlabeled_size(self)

    def get_input_size(self):
        return _pyphy.DatasetInterface_get_input_size(self)

    def get_output_size(self):
        return _pyphy.DatasetInterface_get_output_size(self)

    def get_width(self):
        return _pyphy.DatasetInterface_get_width(self)

    def get_height(self):
        return _pyphy.DatasetInterface_get_height(self)

    def get_channels(self):
        return _pyphy.DatasetInterface_get_channels(self)

    def print_testing_item(self, idx):
        return _pyphy.DatasetInterface_print_testing_item(self, idx)

    def export_h_testing(self, file_name, count):
        return _pyphy.DatasetInterface_export_h_testing(self, file_name, count)

    def save_to_json(self, file_name):
        return _pyphy.DatasetInterface_save_to_json(self, file_name)

    def save_to_txt_training(self, file_name):
        return _pyphy.DatasetInterface_save_to_txt_training(self, file_name)

    def save_to_txt_testing(self, file_name):
        return _pyphy.DatasetInterface_save_to_txt_testing(self, file_name)

    def save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name):
        return _pyphy.DatasetInterface_save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name)
DatasetInterface_swigregister = _pyphy.DatasetInterface_swigregister
DatasetInterface_swigregister(DatasetInterface)

class DatasetParticlesMotion(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetParticlesMotion, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetParticlesMotion, name)
    __repr__ = _swig_repr

    def __init__(self, trajectory_training_input, trajectory_training_output, trajectory_testing_input, trajectory_testing_output, config_file_name):
        this = _pyphy.new_DatasetParticlesMotion(trajectory_training_input, trajectory_training_output, trajectory_testing_input, trajectory_testing_output, config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_DatasetParticlesMotion
    __del__ = lambda self: None
DatasetParticlesMotion_swigregister = _pyphy.DatasetParticlesMotion_swigregister
DatasetParticlesMotion_swigregister(DatasetParticlesMotion)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyphy.new_Log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_Log
    __del__ = lambda self: None

    def set_output_file_name(self, file_name):
        return _pyphy.Log_set_output_file_name(self, file_name)

    def put_string(self, str):
        return _pyphy.Log_put_string(self, str)

    def __lshift__(self, *args):
        return _pyphy.Log___lshift__(self, *args)
Log_swigregister = _pyphy.Log_swigregister
Log_swigregister(Log)

class JsonConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsonConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsonConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result"] = _pyphy.JsonConfig_result_set
    __swig_getmethods__["result"] = _pyphy.JsonConfig_result_get
    if _newclass:
        result = _swig_property(_pyphy.JsonConfig_result_get, _pyphy.JsonConfig_result_set)

    def __init__(self, *args):
        this = _pyphy.new_JsonConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_JsonConfig
    __del__ = lambda self: None

    def load(self, json_file_name):
        return _pyphy.JsonConfig_load(self, json_file_name)

    def save(self, file_name):
        return _pyphy.JsonConfig_save(self, file_name)

    def get_result(self):
        return _pyphy.JsonConfig_get_result(self)
JsonConfig_swigregister = _pyphy.JsonConfig_swigregister
JsonConfig_swigregister(JsonConfig)

class RegressionExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegressionExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegressionExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pyphy.new_RegressionExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyphy.delete_RegressionExperiment
    __del__ = lambda self: None

    def run(self):
        return _pyphy.RegressionExperiment_run(self)
RegressionExperiment_swigregister = _pyphy.RegressionExperiment_swigregister
RegressionExperiment_swigregister(RegressionExperiment)

# This file is compatible with both classic and new-style classes.


